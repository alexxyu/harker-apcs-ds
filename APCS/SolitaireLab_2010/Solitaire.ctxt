#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\n\ Main\ method\n\ \n\ @param\ args\ \ info\ from\ command\ line\n
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ Constructs\ a\ Solitaire\ object.\n
comment10.params=
comment10.target=void\ stockClicked()
comment10.text=\n\ Deals\ cards\ to\ the\ waste\ or\ resets\ the\ stock\ (when\ empty)\ when\ clicked.\n
comment11.params=
comment11.target=void\ wasteClicked()
comment11.text=\n\ Selects\ the\ top\ card\ on\ the\ waste\ pile\ when\ clicked.\n
comment12.params=index
comment12.target=void\ foundationClicked(int)
comment12.text=\n\ Selects\ the\ given\ foundation.\ A\ card\ can\ be\ added\ to\ the\ given\ foundation,\ or\n\ a\ card\ may\ be\ taken\ from\ the\ foundation\ to\ a\ pile.\n\ \n\ @param\ index\ \ \ the\ index\ of\ the\ foundation\ clicked\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 4\n
comment13.params=index
comment13.target=void\ pileClicked(int)
comment13.text=\n\ Selects\ the\ given\ pile.\ A\ card\ can\ be\ moved\ from\ the\ waste\ or\ foundation\ to\n\ the\ pile,\ or\ cards\ may\ be\ moved\ from\ other\ piles\ to\ this\ pile.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ selected\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 7\n
comment14.params=card\ index
comment14.target=boolean\ canAddToPile(Card,\ int)
comment14.text=\n\ Checks\ to\ see\ if\ the\ given\ card\ can\ be\ added\ to\ the\ given\ pile.\n\ \n\ @param\ card\ \ the\ card\ to\ check\n\ @param\ index\ the\ index\ of\ the\ pile\ to\ check\ against\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 7\n\ \n\ @return\ true\ if\ the\ card\ can\ be\ added\ to\ the\ pile;\ else,\n\ \ \ \ \ \ \ \ \ false\n
comment15.params=index
comment15.target=java.util.Stack\ removeFaceUpCards(int)
comment15.text=\n\ Removes\ all\ face-up\ cards,\ if\ any,\ from\ the\ given\ pile.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ to\ remove\ cards\ from\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 7\n\ \n\ @return\ a\ stack\ of\ all\ face-up\ cards\ in\ the\ pile\n
comment16.params=cards\ index
comment16.target=void\ addToPile(java.util.Stack,\ int)
comment16.text=\n\ Adds\ all\ of\ the\ given\ cards\ to\ the\ given\ pile.\n\ \n\ @param\ cards\ the\ stack\ of\ cards\ to\ add\ to\ pile\n\ @param\ index\ the\ index\ of\ the\ pile\ to\ add\ cards\ to\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 7\n\ \n
comment17.params=card\ index
comment17.target=boolean\ canAddToFoundation(Card,\ int)
comment17.text=\n\ Checks\ to\ see\ if\ the\ card\ can\ be\ added\ to\ the\ given\ foundation\n\ \n\ @param\ card\ \ the\ card\ to\ check\n\ @param\ index\ the\ index\ of\ the\ foundation\ to\ check\ against\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 4\n\ \n\ @return\ true\ if\ the\ card\ can\ be\ added\ to\ the\ foundation;\ else,\n\ \ \ \ \ \ \ \ \ false\n
comment18.params=
comment18.target=void\ resetGame()
comment18.text=\n\ Starts\ a\ new\ game.\n
comment19.params=
comment19.target=boolean\ hasWonGame()
comment2.params=
comment2.target=void\ createStock()
comment2.text=\n\ Creates\ the\ stock\ pile\ with\ cards\ in\ a\ random\ order.\n
comment3.params=
comment3.target=void\ deal()
comment3.text=\n\ Deals\ cards\ from\ the\ stock\ to\ the\ piles.\n
comment4.params=
comment4.target=void\ dealCards()
comment4.text=\n\ Deals\ a\ number\ of\ cards\ from\ the\ stock\ to\ the\ waste\ pile.\n
comment5.params=
comment5.target=void\ resetStock()
comment5.text=\n\ Resets\ the\ stock\ by\ returning\ all\ cards\ from\ the\ waste.\n
comment6.params=
comment6.target=Card\ getStockCard()
comment6.text=\n\ Returns\ the\ top\ card\ from\ the\ stock\ pile.\n\ \n\ @return\ the\ card\ on\ top\ of\ the\ stock\ or\ null\ if\ stock\ is\ empty\n
comment7.params=
comment7.target=Card\ getWasteCard()
comment7.text=\n\ Returns\ the\ top\ card\ from\ the\ waste\ pile.\n\ \n\ @return\ the\ card\ on\ top\ of\ the\ waste\ or\ null\ if\ the\ waste\ is\ empty\n
comment8.params=index
comment8.target=Card\ getFoundationCard(int)
comment8.text=\n\ Returns\ the\ top\ card\ from\ the\ foundation\ pile.\n\ \n\ @precondition\:\ \ 0\ <\=\ index\ <\ 4\n\ \n\ @return\ returns\ the\ card\ on\ top\ of\ the\ given\ foundation\ or\ null\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ foundation\ is\ empty\n
comment9.params=index
comment9.target=java.util.Stack\ getPile(int)
comment9.text=\n\ Returns\ a\ reference\ of\ the\ given\ pile.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ to\ return\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 7\n\ \n\ @return\ a\ reference\ to\ the\ given\ pile\n
numComments=20
