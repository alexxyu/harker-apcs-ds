#BlueJ class context
comment0.params=name
comment0.target=GeometricShape(java.lang.String)
comment0.text=\n\ Constructs\ a\ GeometricShape,\ storing\ a\ name.\n\ \n\ @param\ name\ \ the\ name\ given\ to\ a\ particular\ geometric\ shape\n
comment1.params=
comment1.target=java.lang.String\ getName()
comment1.text=\n\ Gets\ the\ name\ of\ the\ geometric\ shape.\n\ \n\ @return\ name\ for\ the\ object\n
comment2.params=name
comment2.target=void\ setName(java.lang.String)
comment2.text=\n\ Sets\ the\ name\ of\ the\ geometric\ shape.\n\ \n\ @param\ name\ \ name\ for\ the\ object\n
comment3.params=
comment3.target=double\ getPerimeter()
comment3.text=\n\ Calculates\ the\ perimeter\ of\ a\ geometric\ shape.\n\ \n\ @return\ the\ perimeter\ of\ the\ geometric\ shape\n
comment4.params=
comment4.target=double\ getArea()
comment4.text=\n\ Calculates\ the\ area\ of\ a\ geometric\ shape.\n\ \n\ @return\ the\ area\ of\ the\ geometric\ shape\n
comment5.params=x\ y
comment5.target=boolean\ isNearlyEqual(java.lang.Object,\ java.lang.Object)
comment5.text=\n\ Determines\ if\ two\ numbers\ are\ within\ an\ epsilon\ difference.\n\ \n\ @param\ x\ Double\ object\ to\ be\ tested\ to\ be\ close\ to\ another\ Double\ object\n\ @param\ y\ Double\ object\ to\ be\ tested\ to\ be\ close\ to\ another\ Double\ object\n\ @return\ true\ if\ the\ numbers\ are\ close\ to\ each\ other;\ otherwise,\ \n\ \ \ \ \ \ \ \ \ false\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ not\ a\ Double\ object\n
comment6.params=obj
comment6.target=int\ compareTo(java.lang.Object)
comment6.text=\n\ Compares\ current\ geometric\ shape\ with\ the\ object\ obj.\ The\n\ comparison\ depends\ upon\ the\ geometric\ shape.\ For\ example,\ circles\n\ are\ compared\ by\ their\ radii.\n\ \n\ @param\ obj\ \ \ GeometricShape\ object\ with\ which\ to\ compare\n\ @return\ \ 0\ \ \ if\ the\ two\ geometric\ shapes\ are\ basically\ the\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ same\ within\ an\ EPSILON\ tolerance\n\ \ \ \ \ \ \ \ >\ 0\ \ \ if\ "this"\ object\ >\ than\ obj's\ object.\n\ \ \ \ \ \ \ \ <\ 0\ \ \ if\ "this"\ object\ <\ than\ obj's\ object.\n
comment7.params=obj
comment7.target=int\ compareAnotherWay(java.lang.Object)
comment7.text=\n\ Compares\ two\ geometric\ shapes\ based\ upon\ the\ areas\ of\n\ the\ geometric\ shapes.\n\ \n\ @param\ obj\ \ \ the\ geometric\ shape\ being\ compared\n\ \n\ @return\ \ 0\ if\ two\ shapes\ have\ the\ same\ area,\n\ \ \ \ \ \ \ \ >\ 0\ if\ "this"\ shape\ has\ an\ area\ greater\ than\ obj,\ or\n\ \ \ \ \ \ \ \ <\ 0\ if\ "this"\ shape\ has\ an\ area\ less\ than\ obj\n\ @throws\ IllegalArgumentException\ if\ obj\ is\ not\ a\ GeometricShape\ object\n
comment8.params=
comment8.target=boolean\ isPolygon()
comment8.text=\n\ Determines\ if\ a\ geometric\ shape\ is\ a\ polygon\n\ \n\ @return\ true\ if\ the\ geometric\ shape\ is\ a\ polygon;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\n\ Formats\ the\ geometric\ object's\ class\ name,\ the\ object's\ name,\n\ its\ perimeter\ and\ area.\n\ \n\ @return\ a\ formatted\ line\ about\ the\ geometric\ object\n
numComments=10
