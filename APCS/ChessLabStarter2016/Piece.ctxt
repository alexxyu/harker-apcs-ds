#BlueJ class context
comment0.params=col\ fileName\ val
comment0.target=Piece(java.awt.Color,\ java.lang.String,\ int)
comment0.text=\n\ Constructs\ a\ new\ Piece\ with\ a\ color,\ value\ and\ \n\ image\ information.\n\ \n\ @param\ col\ color\ of\ the\ piece\n\ @param\ fileName\ the\ image\ file\ name\ for\ piece\n\ @param\ val\ the\ weight\ for\ the\ piece\n
comment1.params=
comment1.target=Board\ getBoard()
comment1.text=\n\ Returns\ the\ board\ this\ piece\ is\ on.\n\ \n\ @return\ the\ board\ this\ piece\ belongs\ to\n
comment10.params=dest
comment10.target=boolean\ isValidDestination(Location)
comment10.text=\n\ Checks\ if\ the\ given\ location\ is\ in\ the\ board\ and\ if\ the\ piece\n\ can\ move\ there.\n\ \n\ @param\ dest\ \ the\ location\ to\ check\n\ @return\ true\ if\ the\ given\ location\ is\ a\ valid\ destination\ for\ the\ piece;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\ \n
comment11.params=
comment11.target=java.util.ArrayList\ destinations()
comment11.text=\n\ Returns\ the\ valid\ destinations\ for\ this\ piece.\n\ \n\ @return\ an\ ArrayList\ of\ all\ valid\ destinations\n
comment12.params=dests\ direction
comment12.target=void\ sweep(java.util.ArrayList,\ int)
comment12.text=\n\ Adds\ all\ valid\ destinations\ directly\ in\ front\ of\ this\ piece\ to\ \n\ an\ ArrayList\ of\ Locations.\n\ \n\ @param\ dests\ the\ ArrayList\ to\ fill\ with\ valid\ destinations\n\ @param\ direction\ the\ current\ direction\ the\ piece\ is\ facing\n
comment2.params=
comment2.target=Location\ getLocation()
comment2.text=\n\ Returns\ the\ location\ of\ this\ piece\ on\ the\ board.\n\ \n\ @return\ the\ location\ this\ piece\ belongs\ to\ on\ the\ board\n
comment3.params=
comment3.target=java.awt.Color\ getColor()
comment3.text=\n\ Returns\ the\ color\ of\ this\ piece.\n\ \n\ @return\ the\ color\ this\ piece\ belongs\ to\ on\ the\ board\n
comment4.params=
comment4.target=java.lang.String\ getImageFileName()
comment4.text=\n\ Returns\ the\ name\ of\ the\ file\ used\ to\ display\ this\ piece.\n\ \n\ @return\ the\ file\ name\ for\ this\ piece\n
comment5.params=
comment5.target=int\ getValue()
comment5.text=\n\ Returns\ a\ number\ representing\ the\ relative\ value\ of\ this\ \n\ piece.\n\ \n\ @return\ the\ value\ of\ this\ piece\n\ \n
comment6.params=
comment6.target=Location\ getOrigin()
comment6.text=\n\ Returns\ the\ original\ location\ on\ the\ board\ where\ this\ piece\ was.\n\ \n\ @return\ the\ original\ location\n
comment7.params=brd\ loc
comment7.target=void\ putSelfInGrid(Board,\ Location)
comment7.text=\n\ Puts\ this\ piece\ into\ a\ board.\ If\ there\ is\ another\ piece\ at\ the\ \n\ given\ location,\ it\ is\ removed.\ <br\ />\n\ \n\ @precondition\ (1)\ this\ piece\ is\ not\ contained\ in\ a\ grid\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (2)\ <code>loc</code>\ is\ valid\ in\ <code>gr</code>\n\ \n\ @param\ brd\ the\ board\ into\ which\ this\ piece\ should\ be\ placed\n\ @param\ loc\ the\ location\ into\ which\ the\ piece\ should\ be\ placed\n
comment8.params=
comment8.target=void\ removeSelfFromGrid()
comment8.text=\n\ Removes\ this\ piece\ from\ its\ board.\ \n\ \n\ @precondition\ this\ piece\ is\ contained\ in\ a\ board\n\ \n
comment9.params=newLocation
comment9.target=void\ moveTo(Location)
comment9.text=\n\ Moves\ this\ piece\ to\ a\ new\ location.\ If\ there\ is\ another\ piece\ \n\ at\ the\ given\ location,\ it\ is\ removed.\n\ \n\ @precondition\ (1)\ this\ piece\ is\ contained\ in\ a\ grid\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (2)\ <code>newLocation</code>\ is\ valid\ in\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ grid\ of\ this\ piece\n\ \n\ @param\ newLocation\ the\ new\ location\n
numComments=13
