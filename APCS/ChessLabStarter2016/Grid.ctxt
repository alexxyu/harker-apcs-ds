#BlueJ class context
comment0.params=
comment0.target=int\ getNumRows()
comment0.text=\n\ Returns\ the\ number\ of\ rows\ in\ this\ grid.\n\ \n\ @return\ the\ number\ of\ rows,\ or\ \n\ \ \ \ \ \ \ \ \ -1\ if\ this\ grid\ is\ unbounded\n
comment1.params=
comment1.target=int\ getNumCols()
comment1.text=\n\ Returns\ the\ number\ of\ columns\ in\ this\ grid.\n\ \n\ @return\ the\ number\ of\ columns,\ or\ \n\ \ \ \ \ \ \ \ \ -1\ if\ this\ grid\ is\ unbounded\n
comment10.params=loc
comment10.target=java.util.ArrayList\ getNeighbors(Location)
comment10.text=\n\ Gets\ the\ neighboring\ occupants\ in\ all\ eight\ compass\ directions\ \n\ (north,\ northeast,\ east,\ southeast,\ south,\ southwest,\ west,\ and\ \n\ northwest).\ <br\ />\n\ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ ArrayList\ of\ the\ objects\ in\ the\ occupied\ \n\ \ \ \ \ \ \ \ \ location\ adjacent\ to\ <code>loc</code>\ in\ this\ grid\n
comment2.params=loc
comment2.target=boolean\ isValid(Location)
comment2.text=\n\ Checks\ whether\ a\ location\ is\ valid\ in\ this\ grid.\ <br\ />\n\ \n\ @precondition\ \ <code>loc</code>\ is\ not\ <code>null</code>\n\ @param\ loc\ \ the\ location\ to\ check\n\ @return\ <code>true</code>\ if\ <code>loc</code>\ is\ valid\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ this\ grid;\ otherwise,\n\ \ \ \ \ \ \ \ \ <code>false</code>\ \n
comment3.params=loc\ obj
comment3.target=java.lang.Object\ put(Location,\ java.lang.Object)
comment3.text=\n\ Puts\ an\ object\ at\ a\ given\ location\ in\ this\ grid.\ <br\ />\n\ \n\ @precondition\ \ (1)\ <code>loc</code>\ is\ valid\ in\ this\ grid\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (2)\ <code>obj</code>\ is\ not\ <code>null</code>\n\ @param\ loc\ \ the\ location\ at\ which\ to\ put\ the\ object\n\ @param\ obj\ \ the\ new\ object\ to\ be\ added\n\ @return\ the\ object\ previously\ at\ <code>loc</code>\ \n\ \ \ \ \ \ \ \ \ (or\ <code>null</code>\ if\ the\ location\ was\ \n\ \ \ \ \ \ \ \ \ previously\ unoccupied)\n
comment4.params=loc
comment4.target=java.lang.Object\ remove(Location)
comment4.text=\n\ Removes\ the\ object\ at\ a\ given\ location\ from\ this\ grid.\ <br\ />\n\ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ \ the\ location\ of\ the\ object\ that\ is\ to\ be\ removed\n\ @return\ the\ object\ that\ was\ removed\ \n\ \ \ \ \ \ \ \ \ (or\ <code>null<code>\ if\ the\ location\n\ \ \ \ \ \ \ \ \ is\ unoccupied)\n
comment5.params=loc
comment5.target=java.lang.Object\ get(Location)
comment5.text=\n\ Returns\ the\ object\ at\ a\ given\ location\ in\ this\ grid.\ <br\ />\n\ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ the\ object\ at\ location\ <code>loc</code>\ \n\ \ \ \ \ \ \ \ \ (or\ <code>null<code>\ if\ the\ location\ \n\ \ \ \ \ \ \ \ \ is\ unoccupied)\n
comment6.params=
comment6.target=java.util.ArrayList\ getOccupiedLocations()
comment6.text=\n\ Gets\ the\ locations\ in\ this\ grid\ that\ contain\ objects.\n\ \n\ @return\ an\ array\ list\ of\ all\ occupied\ locations\ in\ this\ grid\n
comment7.params=loc
comment7.target=java.util.ArrayList\ getValidAdjacentLocations(Location)
comment7.text=\n\ Gets\ the\ valid\ locations\ adjacent\ to\ a\ given\ location\ in\ all\ \n\ eight\ compass\ directions\ (north,\ northeast,\ east,\ southeast,\ \n\ south,\ southwest,\ west,\ and\ northwest).\ <br\ />\n\ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ locations\ adjacent\ to\ \n\ \ \ \ \ \ \ \ \ <code>loc</code>\ in\ this\ grid\n
comment8.params=loc
comment8.target=java.util.ArrayList\ getEmptyAdjacentLocations(Location)
comment8.text=\n\ Gets\ the\ valid\ empty\ locations\ adjacent\ to\ a\ given\ location\ \n\ in\ all\ eight\ compass\ directions\ (north,\ northeast,\ east,\ \n\ southeast,\ south,\ southwest,\ west,\ and\ northwest).\ <br\ />\n\ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ empty\ locations\ adjacent\n\ \ \ \ \ \ \ \ \ to\ <code>loc</code>\ in\ this\ grid\n
comment9.params=loc
comment9.target=java.util.ArrayList\ getOccupiedAdjacentLocations(Location)
comment9.text=\n\ Gets\ the\ valid\ occupied\ locations\ adjacent\ to\ a\ given\ location\ \n\ in\ all\ eight\ compass\ directions\ (north,\ northeast,\ east,\n\ \ southeast,\ south,\ southwest,\ west,\ and\ northwest).\ <br\ />\n\ \ \n\ @precondition\ <code>loc</code>\ is\ valid\ in\ this\ grid\n\ @param\ loc\ a\ location\ in\ this\ grid\n\ @return\ an\ array\ list\ of\ the\ valid\ occupied\ locations\ adjacent\n\ \ \ \ \ \ \ \ \ to\ <code>loc</code>\u00A0in\ this\ grid\n
numComments=11
